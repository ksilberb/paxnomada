{
  "hash": "4c680fa68f792330018ed5131e9168a0",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"10,001st Prime\"\nsubtitle: Problem 7\ndate: 07/14/2025\nauthor: Kevin Silberberg\nbibliography: ref.bib\nengine: julia-1.11\njulia:\n  exeflags: [\"--project=/home/kevinsilberberg/paxnomada/projecteuler/\"]\nexecute:\n  daemon: 3600\n  cache: true\n  freeze: auto\n---\n\n## Problem definition\n\nBy listing the first six prime numbers: $2, 3, 5, 7, 11, \\text{ and } 13$, we can see that the $6$th prime is 13.\n\nWhat is the 10,001st prime number?\n\n## Solution\n\nWe are going to implement the ancient algorithm the [sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) for finding all prime numbers up to any given limit.\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\n\"\"\"\nN :: Integer, primes up to N\n\"\"\"\nfunction sieve_of_erato(N::Int)\n    if N < 2\n        return Int[]\n    end\n\n    sieve = trues(N)\n    sieve[1] = false\n\n    if N ≥ 2\n        sieve[4:2:N] .= false\n    end\n\n    for p in 3:2:isqrt(N)\n        if sieve[p]\n            r = p*p\n            if r ≤ N\n                sieve[r:2*p:N] .= false\n            end\n        end\n    end\n    return findall(sieve)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nMain.Notebook.sieve_of_erato\n```\n:::\n:::\n\n\n\nThis returns a Vector of integers, of all the primes up to the number $N$. What we want though is specifically the Nth prime number denoted $p_n$. Using the above function is computationally expensive, so ideally we only want to generate the numbers once.\n\nIn 1902, [Mechele Cipolla](https://en.wikipedia.org/wiki/Michele_Cipolla) proved that the nth prime $p_n$ has aymptotic expansion,\n\n$$p_n = n \\text{log}(n) + n \\text{log}(\\text{log}(n)) - n + \\sum_{i=1}^{r}(-1)^{i-1}\\frac{f_i \\left(\\text{log}(\\text{log}(n))\\right)}{i! \\text{log}^{i}(n)} + o \\left(\\frac{n}{\\text{log}^{r}(n)}\\right)$$\n\nWhere $f_i(\\text{log}(\\text{log}(n)))$ and $g_i(\\text{log}(\\text{log}(n)))$ are polynomials in $\\text{log}(\\text{log}(n))$ of degree $i$, with integer coefficients and positive leading coefficient [@jakimczuk2008].\n\nIf $r = 0$ we obtain\n\n$$p_n = n \\text{log}(n) + n \\text{log}(\\text{log}(n)) - n + o(n)$$\n\nWe want to over approximate the input though so we will just use the value\n\n$$p_n \\approx n \\left(\\text{log}(n) + \\text{log}(\\text{log}(n))\\right)$$\n\nLet us write a function that finds the nth prime number $p_n$ given this over-approximation.\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction nthprime(N::Int)\n    p = Int(ceil(N*(log(N) + log(log(N)))))\n    return sieve_of_erato(p)[N]\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nnthprime (generic function with 1 method)\n```\n:::\n:::\n\n\n\nSo the answer is thus,\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nnthprime(10001)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n104743\n```\n:::\n:::\n\n\n\n",
    "supporting": [
      "10001stprime_files"
    ],
    "filters": [],
    "includes": {}
  }
}