{
  "hash": "f44be13e06292adaabee8664905ce1cc",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Even Fibonacci Numbers\"\nsubtitle: Problem 2\ndate: 04/14/2025\nauthor: Kevin Silberberg\nengine: julia-1.11\njulia:\n  exeflags: [\"--project=/home/kevinsilberberg/paxnomada/projecteuler/\"]\nexecute:\n  daemon: true\n  cache: true\n  freeze: auto\n---\n\n## Problem definition\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n\\begin{align}\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\cdots\n\\end{align}\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n## Solution\n\nThe fibonacci sequence can be thought of as a discrete dynamical system or a recurrance relation defined as follows,\n\n\\begin{align}\nx_{n+1} = x_{n} + x_{n-1}\n\\end{align}\n\nwhere $x_{0} = 0$ and $x_{1} = 1$ and $n = 1, 2, 3, \\cdots, N$.\n\nWhen $N = 35$ the value $x_{N}$ exceeds four million, thus we will solve for the fibonacci numbers up to the value $N = 34$ and then use a julia `filter` function along with the `iseven` conditional function to sum only the even values.\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nN = 34\nx = Vector{Int}(undef, N)\nx[1] = 0\nx[2] = 1\nfor n = 2:N-1\n    x[n+1] = x[n] + x[n-1]\nend\nprintln(sum(filter(iseven, x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4613732\n```\n:::\n:::\n\n\n\n",
    "supporting": [
      "evenfibonaccinumbers_files"
    ],
    "filters": [],
    "includes": {}
  }
}