{
  "hash": "528644e59d879125a2ceb60072e1d927",
  "result": {
    "engine": "julia",
    "markdown": "---\nengine: julia-1.11\njulia:\n  exeflags: [\"--project=/home/kevinsilberberg/paxnomada/rosalind/\"]\nexecute:\n  daemon: true\n  cache: true\n  eval: false\n  freeze: auto\n---\n\n# Problem\n\nIn DNA strings, sysmbols 'A' and 'T' are complements of each other, as are 'C' and 'G'.\n\nThe reverse complement of a DNA string $s$ is the string $s^C$ formed by reversing the symbols of $s$, then taking the complement of each symbol (e.g., the reverse complement of 'GTCA' is 'TGAC').\n\n## Given\n\nA DNA string $s$ of length at most 1000 base pairs.\n\n## Return\n\nThe reverse complement $s^C$ of $s$.\n\n## Sample dataset\n\n```{text}\nAAAACCCGGT\n```\n\n## Sample Output\n\n```{text}\nACCGGGTTTT\n```\n\n### Solution\n\n::: {#2 .cell execution_count=0}\n``` {.julia .cell-code}\nfunction reverse_complement(s::AbstractString)\n    rev_map = Dict{Char, Char}(\n        'A' => 'T', 'T' => 'A',\n        'G' => 'C', 'C' => 'G'\n    )\n    io = IOBuffer()\n    for char in reverse(s)\n        write(io, rev_map[char])\n    end\n    return String(take!(io))\nend\n\nfunction main()\n    first_line = readline(ARGS[1])\n    output = reverse_complement(first_line)\n    write(\"output.txt\", output)\n    println(output)\nend\n\nmain()\n\n```\n:::\n\n\n\n",
    "supporting": [
      "complement_files"
    ],
    "filters": [],
    "includes": {}
  }
}