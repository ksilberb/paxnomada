{
    "cells": [
        {
            "id": "1",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "---\n",
                "title: \"10,001st Prime\"\n",
                "subtitle: Problem 7\n",
                "date: 07/14/2025\n",
                "author: Kevin Silberberg\n",
                "engine: julia-1.11\n",
                "julia:\n",
                "  exeflags: [\"--project=/home/kevinsilberberg/paxnomada/projecteuler/\"]\n",
                "execute:\n",
                "  daemon: 3600\n",
                "  cache: true\n",
                "  freeze: auto\n",
                "---\n",
                "\n",
                "## Problem definition\n",
                "\n",
                "By listing the first six prime numbers: $2, 3, 5, 7, 11, \\text{ and } 13$, we can see that the $6$th prime is 13.\n",
                "\n",
                "What is the 10,001st prime number?\n",
                "\n",
                "## Solution\n",
                "\n",
                "We are going to implement the ancient algorithm the [sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) for finding all prime numbers up to any given limit."
            ]
        },
        {
            "id": "2",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "\"\"\"\n",
                "N :: Integer, primes up to N\n",
                "\"\"\"\n",
                "function sieve_of_erato(N::Int)\n",
                "    if N < 2\n",
                "        return Int[]\n",
                "    end\n",
                "\n",
                "    sieve = trues(N)\n",
                "    sieve[1] = false\n",
                "\n",
                "    if N ≥ 2\n",
                "        sieve[4:2:N] .= false\n",
                "    end\n",
                "\n",
                "    for p in 3:2:isqrt(N)\n",
                "        if sieve[p]\n",
                "            r = p*p\n",
                "            if r ≤ N\n",
                "                sieve[r:2*p:N] .= false\n",
                "            end\n",
                "        end\n",
                "    end\n",
                "    return findall(sieve)\n",
                "end"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "Main.Notebook.sieve_of_erato"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "3",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "This returns a Vector of integers, of all the primes up to the number $N$. What we want though is specifically the Nth prime number. Using the above function is computationally expensive, so ideally we only want to generate the numbers once.\n",
                "\n",
                "The [prime number theorem](https://en.wikipedia.org/wiki/Prime_number_theorem) (PNT) provides us with an approximation for the number of primes that are less than or equal to an integer value $N$. Known as the asymptotic law of the distribution of prime numbers, this results in the following statement which we can use to approximate what value of $N$ we need to pass our `sieve_of_erato` function such that the last element is the $k$th prime number of interest.\n",
                "\n",
                "$$k_n \\approx n \\text{log}(n)$${#eq-pnt}"
            ]
        },
        {
            "id": "4",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "function nthprime(N::Int)\n",
                "    k = Int(ceil(N*(log(N) + log(log(N)))))\n",
                "    return sieve_of_erato(k)[N]\n",
                "end\n",
                "nthprime(10001)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "104743"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "5",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        }
    ],
    "timestamp": "2025-07-14T12:36:19.783",
    "file": "/home/kevinsilberberg/Repos/paxnomada/problems/projecteuler/level_1/10001stprime.qmd",
    "qnr_schema_version": "1.0.0"
}