{
    "cells": [
        {
            "id": "1",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "---\n",
                "engine: julia-1.11\n",
                "julia:\n",
                "  exeflags: [\"--project=/home/kevinsilberberg/paxnomada/projecteuler/\"]\n",
                "execute:\n",
                "  daemon: true\n",
                "  cache: true\n",
                "  freeze: auto\n",
                "---\n",
                "\n",
                "# Largest Prime Factor (Problem 3)\n",
                "\n",
                "The prime factors of 13195 are 5, 7, 13, and 29.\n",
                "\n",
                "What is the largest prime factor of the number 600851475143?\n",
                "\n",
                "## Solution\n",
                "\n",
                "A prime number is a whole number above $1$ that **cannot** be made by multiplying other whole numbers.\n",
                "\n",
                "For this problem we are going to need to generate prime numbers which I do not know how to do.\n",
                "\n",
                "**research**\n",
                "\n",
                "[Generation of primes (wiki)](https://en.wikipedia.org/wiki/Generation_of_primes)\n",
                "\n",
                "[Sieve of Atkin](https://en.wikipedia.org/wiki/Sieve_of_Atkin)\n",
                "\n",
                "Let us implement the Sieve of Atkin algorithm, so we can generate prime numbers."
            ]
        },
        {
            "id": "2",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "function atkinSieve(N::Int)\n",
                "    sieve = falses(N)\n",
                "    if N >= 2 sieve[2] = true end\n",
                "    if N >= 3 sieve[3] = true end\n",
                "    if N >= 5 sieve[5] = true end\n",
                "\n",
                "    for x in 1:isqrt(N)\n",
                "        for y in 1:isqrt(N)\n",
                "            n = 4*x*x + y*y\n",
                "            if n <= N && (mod(n, 12) == 1 || mod(n, 12) == 5)\n",
                "                sieve[n] = !sieve[n]\n",
                "            end\n",
                "            n = 3*x*x + y*y\n",
                "            if n <= N && mod(n, 12) == 7\n",
                "                sieve[n] = !sieve[n]\n",
                "            end\n",
                "            if x > y\n",
                "                n = 3*x*x - y*y\n",
                "                if n <= N && mod(n, 12) == 11\n",
                "                    sieve[n] = !sieve[n]\n",
                "                end\n",
                "            end\n",
                "        end\n",
                "    end\n",
                "\n",
                "    for r in 5:isqrt(N)\n",
                "        if sieve[r]\n",
                "            for i in r*r:r*r:N\n",
                "                sieve[i] = false\n",
                "            end\n",
                "        end\n",
                "    end\n",
                "    [i for i in 1:N if sieve[i]]\n",
                "end"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "atkinSieve (generic function with 1 method)"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "3",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "For the next part of the problem we need to develope an algorithm that finds the prime factorization for any integer $K$."
            ]
        },
        {
            "id": "4",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "function primeFactor(K::Int)\n",
                "    if K <= 0\n",
                "        throw(DomainError(K, \"Input must be a positive integer\"))\n",
                "    elseif K == 1\n",
                "        return Dict{Int, Int}()\n",
                "    end\n",
                "    # generate prime numbers up to sqrt(K)+1\n",
                "    primes = atkinSieve(isqrt(K) + 1)\n",
                "    factors = Dict{Int, Int}()\n",
                "    remaining = K\n",
                "    for p in primes\n",
                "        if remaining == 1\n",
                "            break\n",
                "        end\n",
                "        power = 0\n",
                "        # count how many times p divides remaining\n",
                "        while mod(remaining, p) == 0\n",
                "            power += 1\n",
                "            remaining รท= p\n",
                "        end\n",
                "        # add the prime factor to dict\n",
                "        # the value represents how many times that factor divided remaining\n",
                "        if power > 0\n",
                "            factors[p]  = power\n",
                "        end\n",
                "    end\n",
                "    # if the remaining value is greater than 1, it must be prime\n",
                "    # if it were composite it would have at least one prime factor less than or equal to sqrt(K)\n",
                "    # which we would have diveded out already.\n",
                "    if remaining > 1\n",
                "        factors[remaining] = 1\n",
                "    end\n",
                "    factors\n",
                "end\n",
                "primeFactor(600851475143)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "Dict{Int64, Int64} with 4 entries:\n  839  => 1\n  71   => 1\n  1471 => 1\n  6857 => 1"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "5",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "So the largest prime number is therefore $6857$"
            ]
        }
    ],
    "timestamp": "2025-07-13T11:42:34.92",
    "file": "/home/kevinsilberberg/Repos/paxnomada/problems/projecteuler/level_1/largestprimefactor.qmd",
    "qnr_schema_version": "1.0.0"
}